# Regression models: multiple predictors {#sec-regression-cat-cat}

![](https://img.shields.io/badge/Area-Statistics-red) ![](https://img.shields.io/badge/Area-R-green)

```{r}
#| label: setup
#| include: false

library(tidyverse)
theme_set(theme_light())
library(brms)
```

So far, we fitted regressions with a single predictor, like the following Gaussian model of reaction times from @sec-regression-index:

$$
\begin{align}
RT_i & \sim Gaussian(\mu_i, \sigma)\\
\mu_i & = \beta_1 \cdot W_{\text{T}[i]} + \beta_2 \cdot W_{\text{F}[i]}\\
\end{align}
$$

The categorical predictor $W$ (`IsWord` in the data) has two levels (`TRUE` and `FALSE`), so there are two indexing variables: $W_{\text{T}}$ and $W_{\text{F}}$. Each indexing variable gets its coefficient: $\beta_1$ and $\beta_2$. In most context, however, you will want to investigate the effects of more than one predictor.

Regression models can be fit with multiple predictors. Traditionally, regression models with a single predictor were called "simple regression" and models with more than one "multiple regression", but it doesn't make sense to have a specific name: they are all regression models. In this chapter, we will discuss regression models with two categorical predictors.

## Two categorical predictors

```{r}
#| label: polite
#| message: false

polite <- read_csv("data/winter2012/polite.csv")
```

```{r}
#| label: f0-bm

f0_bm <- brm(
  f0mn ~ gender + attitude,
  family = gaussian,
  data = polite,
  cores = 4,
  seed = 7123,
  file = "cache/ch-regression-cat-cat_f0_bm"
)
```

```{r}
#| label: f0-bm-summary
summary(f0_bm)
```

```{r}
#| label: f0-bm-cond-gender
conditional_effects(f0_bm, "gender")
```

```{r}
#| label: f0-bm-cond-attitude
conditional_effects(f0_bm, "attitude")
```

```{r}
#| label: f0-bm-cond-both
conditional_effects(f0_bm, "gender:attitude")
```

## Is the effect of attitude the same in both genders?

```{r}
#| label: fig-f0-plot
#| warning: false

polite |> 
  ggplot(aes(gender, f0mn, colour = attitude)) +
  geom_jitter(alpha = 0.7, position = position_jitterdodge(jitter.width = 0.1, seed = 2836))
```
