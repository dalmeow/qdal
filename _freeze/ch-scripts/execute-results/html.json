{
  "hash": "766fd8ef7bedb66ab9a0cdf3a43a24c2",
  "result": {
    "engine": "knitr",
    "markdown": "# R scripts\n\n![](https://img.shields.io/badge/Area-R-green)\n\n\n\nSo far, you've been writing R code in the **Console** and run it there. But this is not very efficient. Every time, you need to write the code and execute it in the right order and it quickly becomes very difficult to keep track of everything when things start getting more involved. A solution is to use **R scripts**.\n\n::: callout-tip\n## R script\n\nAn **R script** is a file with the `.R` extension that contains R code.\n:::\n\nFrom now on, you should write all code in an R script, until you will learn about Quarto documents.\n\n## Create an R script\n\nFirst, create a folder called `code` in your Quarto project folder. This will be the folder where you will save all of your R scripts and other documents.\n\nNow, to create a new R script, look at the top-left corner of RStudio: the first button to the left looks like a white sheet with a green plus sign. This is the `New file` button. Click on that and you will see a few options to create a new file.\n\nClick on `R Script`. A new empty R script will be created and will open in the File Editor window of RStudio.\n\n![](img/new-script-button.png)\n\n**Note** that creating an R script does not automatically saves it on your computer. To do so, either use the keyboard short-cut `CMD+S`/`CTRL+S` or click on the floppy disk icon in the menu below the file tab.\n\n![](img/save-button.png)\n\nSave the file inside the `code/` folder with exactly the following name: `week-02.R`.\n\n::: callout-important\nRemember that all the files of your RStudio project don't live inside RStudio but on your computer.\n\nSo you can always access them from the Finder or File Explorer! **However**, do not open a file by double clicking on it from the Finder/File Explorer.\n\nRather, **open the Quarto project by double clicking on the `.Rproj` file** and then open files from RStudio to ensure you are working within the RStudio project and the working directory is set correctly.\n:::\n\n## Write code\n\nNow, let's start filling up that script!\n\nGenerally, you start the script with calls to `library()` to load all the packages you need for the script. Please, get in the habit of doing this from now, so that you can keep your scripts tidy and pretty! You will learn soon about the tidyverse packages in the following chapter so for now just attach the cowsay and fortune packages.\n\n::: callout-important\nStart your R scripts with calls to `library()` and attach all of the packages that are needed to run that script.\n:::\n\nGo ahead, write the following code in the top of the `.R` script.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cowsay)\nlibrary(fortunes)\n\nsay(\"fortune\", \"monkey\")\nsay(\"What a lovely day for a wedding\", \"spider\")\n```\n:::\n\n\n::: callout-important\nPlease, don't include `install.packages()` in your R scripts!\n\nRemember, you only have to install a package once, and you can just type it in the Console.\n\nBut **DO** include `library()` calls at the top of your scripts.\n:::\n\n## Running scripts\n\nFinally, the time has come to **run the script**.\n\nThere are several ways of doing this. The most straightforward is to click on the `Run` button. You can find this in the top-right corner of the script window.\n\n![](img/run-button.png)\n\nAn alternative way is to place the text cursor on the line of code you want to run and then press `CMD+ENTER`/`CTRL+ENTER`. This will run the line of code and move the text cursor to the next line of code. You can even select multiple lines of code (as you would select text) and press `CMD+ENTER`/`CTRL+ENTER` to run multiple lines of code! Now that you know how to use R scripts and run code in them, I will assume that you will keep writing new code in your script and run it from there.\n\n## Comments\n\nSometimes we might want to add a few lines of text in our script, for example to take notes. You can add so-called **comments** in R scripts, simply by starting a line with `#`.\n\nFor example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is a comment. Let's add 6 + 3.\n6 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n::: callout-note\n#### Quiz 1\n\nIs the following a valid line of R code? <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n\n``` r\nsum(x + 2) # x = 4\n```\n:::\n\n::: {.callout-important collapse=\"true\"}\n#### Explanation\n\nIt is a valid line of R code, but if you got an error it is probably because the variable `x` does not exist (yet). If you add the line `x <- 4` before `sum(x + 2) # x = 4`, the latter will work just fine.\n\nSo you see there is a difference between *valid* code and *working* code.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}