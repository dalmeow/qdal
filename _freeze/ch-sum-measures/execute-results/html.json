{
  "hash": "a64e1ff6a0ffd97b2295b1c190f5ce59",
  "result": {
    "engine": "knitr",
    "markdown": "# Summary measures {#sec-summaries}\n\n![](https://img.shields.io/badge/Area-Statistics-red)\n\n\n\n## Overview\n\n![](img/data-summ.png){fig-align=\"center\" width=\"500\"}\n\nAs you learned in @sec-quantitative, quantitative data analysis can be concieved as three activities: summarising, visualising and modeling data. In this chapter, you will learn about summarising data. When we say \"summarising data\" we usually mean summarising data variables, by themselves or in group. We can summarise statistical variables using **summary measures**. There are two types of summary measures.\n\n-   **Measures of central tendency** indicate the **typical or central value** of a variable.\n\n-   **Measures of dispersion** indicate the **spread or dispersion** of the variable values around the central tendency value.\n\n**Always report a measure of central tendency together with its measure of dispersion!** A central tendency mesure captures only one aspect of the \"distribution\" of the values and variables with the same central tendency value could have very different dispersion, and hence be very different in nature. For example, look at the density plot in @fig-same-mean (you will learn more about them in XXX). These plots are good at showing the distribution of values of numeric variables. The higher the density the curve, the more the values under that part of the curve are represented in the sample. Varible `a` and `b` have the same mean (central tendency): the mean is 0. But `a` has a standard deviation (measure of dispertion, more on this below) of 1 while `b`'s standard deviation is 3. You can appreciate how different `a` and `b` are, despite having exactly the same mean. This should show how important it is to not only report (and think about) central tendencies, like the mean, but also the dispertion of the data around the central tendency.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](ch-sum-measures_files/figure-html/fig-same-mean-1.png){#fig-same-mean width=672}\n:::\n:::\n\n\nThe following call-outs list common measures of central tendency and dispersions and how they are calculated. You will probably be familiar with most of them and you don't have to memorise the formulae. The sections after this one will dive into when to use each measure (and how to get them in R), which is much more important.\n\n::: callout-note\n### Measures of central tendency\n\n**Mean**\n\n$$\\bar{x} = \\frac{\\sum_{i=1}^{n} x_i}{n} = \\frac{x_1 + ... + x_n}{n}$$\n\n**Median**\n\n$$\\text{if } n \\text{ is odd, } x_\\frac{n+1}{2}$$\n\n$$\\text{if } n \\text{ is even,  } \\frac{x_\\frac{n}{2} + x_{\\frac{n}{2}+1}}{2}$$\n\n**Mode**\n\nThe most common value.\n:::\n\n::: callout-note\n### Measures of dispersion\n\n**Minimum and maximum** values\n\n**Range**\n\n$$ max(x) - min(x)$$\n\nThe difference between the largest and smallest value.\n\n**Standard deviation**\n\n$$\\text{SD} = \\sqrt{\\frac{\\sum_{i=1}^n (x_i - \\bar{x})^2}{n-1}} = \\sqrt{\\frac{(x_1 - \\bar{x})^2 + ... + (x_n - \\bar{x})^2}{n-1}}$$\n:::\n\n## Measures of central tendency\n\n### Mean\n\nUse the mean with **numeric continuous variables**, if:\n\n-   The variable can take on any positive and negative number, including 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(-1.12, 0.95, 0.41, -2.1, 0.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.354\n```\n\n\n:::\n:::\n\n\n-   The variable can take on any positive number only.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(c(0.32, 2.58, 1.5, 0.12, 1.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.122\n```\n\n\n:::\n:::\n\n\n::: callout-important\n**Don't take the mean of proportions and percentages!**\n\nBetter to calculate the proportion/percentage across the entire data, rather than take the mean of individual proportions/percentages: see [this blog post](https://www.robertoreif.com/blog/2018/1/7/why-you-should-be-careful-when-averaging-percentages). If you really really have to, use the *median*.\n:::\n\n### Median\n\nUse the median with **numeric (continuous and discrete) variables**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# odd N\nmedian(c(-1.12, 0.95, 0.41, -2.1, 0.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.09\n```\n\n\n:::\n\n```{.r .cell-code}\n# even N\neven <- c(4, 6, 3, 9, 7, 15)\nmedian(even)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n\n```{.r .cell-code}\n# the median is the mean of the two \"central\" number\nsort(even)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  3  4  6  7  9 15\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(c(6, 7))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n:::\n\n\n::: callout-important\n-   **The mean is very sensitive to outliers.**\n\n-   The median is **not**.\n\nThe following list of numbers does not have obvious outliers. The mean and median are not to different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# no outliers\nmedian(c(4, 6, 3, 9, 7, 15))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(c(4, 6, 3, 9, 7, 15))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.333333\n```\n\n\n:::\n:::\n\n\nIn the following case, there is quite a clear outlier, `40`. Look how the mean is higher than the median. This is because the outlier `40` pulls the mean towards it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# one outlier\nmedian(c(4, 6, 3, 9, 7, 40))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(c(4, 6, 3, 9, 7, 40))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 11.5\n```\n\n\n:::\n:::\n\n:::\n\n### Mode\n\nUse the mode with **categorical (discrete) variables**. Unfortunately the `mode()` function in R is not the *statistical* mode, but rather it returns the R object type.\n\nYou can use the `table()` function to \"table\" out the number of occurrences of elements in a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(c(\"red\", \"red\", \"blue\", \"yellow\", \"blue\", \"green\", \"red\", \"yellow\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  blue  green    red yellow \n     2      1      3      2 \n```\n\n\n:::\n:::\n\n\nThe mode is the most frequent value: here it is `red`, with 3 occurrences.\n\n::: callout-important\n**Likert scales are ordinal (categorical) variables, so the mean and median are not appropriate!** This is true even when Likert scales are represented with numbers, like \"1, 2, 3, 4, 5\" for a 5-point scale.\n\nYou should use the mode (you can use the median with Likert scales if you really really need to...).\n:::\n\n## Measures of dispersion\n\n### Minimum and maximum\n\nYou can report minimum and maximum values for any **numeric variable**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_1 <- c(-1.12, 0.95, 0.41, -2.1, 0.09)\n\nmin(x_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.1\n```\n\n\n:::\n\n```{.r .cell-code}\nmax(x_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.95\n```\n\n\n:::\n\n```{.r .cell-code}\nrange(x_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -2.10  0.95\n```\n\n\n:::\n:::\n\n\nNote that the `range()` function does not return the statistical range (see next section), but simply prints both the minimum and the maximum.\n\n### Range\n\nUse the range with any **numeric variable**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_1 <- c(-1.12, 0.95, 0.41, -2.1, 0.09)\nmax(x_1) - min(x_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.05\n```\n\n\n:::\n\n```{.r .cell-code}\nx_2 <- c(0.32, 2.58, 1.5, 0.12, 1.09)\nmax(x_2) - min(x_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.46\n```\n\n\n:::\n\n```{.r .cell-code}\nx_3 <- c(4, 6, 3, 9, 7, 15)\nmax(x_3) - min(x_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n:::\n\n\n### Standard deviation\n\nUse the standard deviation with **numeric continuous variables**, if:\n\n-   The variable can take on any positive and negative number, including 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(c(-1.12, 0.95, 0.41, -2.1, 0.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.23658\n```\n\n\n:::\n:::\n\n\n-   The variable can take on any positive number only.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(c(0.32, 2.58, 1.5, 0.12, 1.09))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9895555\n```\n\n\n:::\n:::\n\n\n::: callout-important\nStandard deviations are **relative** and depend on the measurement **unit/scale!**\n\n**Don't use the standard deviation with proportions and percentages!**\n:::\n",
    "supporting": [
      "ch-sum-measures_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}