# Quarto {#sec-quarto}

![](https://img.shields.io/badge/Area-R-green)

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(webexercises)
```

```{r}
#| label: read-data
#| echo: false
#| message: false

polite <- read_csv("data/winter2012/polite.csv")
```

Before moving onto data visualisation, it is time now to step up your coding organisation skills. Keeping track of the code you use for data analysis is a very important aspect of research project managing: not only the code is there if you need to rerun it later, but it allows your data analysis to be **reproducible** (i.e., it can be reproduced by you or other people in such a way that starting with the same data and code you get to the same results).

::: callout-tip
### Reproducible research

Research is **reproducible** when the same data and same code return the same results.
:::

You will learn about reproducibility and related concepts in more details in @sec-open-research. R scripts are great for writing code, and you can even document the code (add explanations or notes) with comments (i.e. lines that start with `#`). But for longer text or complex data analysis reports, R scripts can be a bit cumbersome. A solution to this is using Quarto files (they have the `.qmd` extension).

## Code... and text!

[Quarto](https://quarto.org) is a file format that allows you to mix code and formatted text in the same file. This means that you can write **dynamic reports** using Quarto files: dynamic reports are just like analysis reports (i.e. they include formatted text, plots, tables, code output, code, etc...) but they are **dynamic** in the sense that if, for example, data or code changes, you can just rerun the report file and all code output (plots, tables, etc...) is updated accordingly!

::: callout-tip
#### Dynamic reports in Quarto

**Quarto** is a file type with extension `.qmd` in which you can write formatted text and code together.

Quarto can be used to generate **dynamic reports**: these are files that are generated automatically from the file source, ensuring data and results in the report are always up to date.
:::

## Formatting text

R comments in R scripts cannot be formatted (for example, you can't make text bold or italic). Text in Quarto files can be fully formatted using a simple but powerful **mark-up language** called [Markdown](https://www.markdownguide.org). You don't have to learn markdown all in one go, so I encourage you to just learn it bit by bit, at your pace. You can look at the the [Markdown Guide](https://www.markdownguide.org/getting-started/) for an in-depth intro and/or dive in the [Markdown Tutorial](https://www.markdowntutorial.com) for a hands-on approach.

A few quick pointers (you can test them in the [Markdown Live Preview](https://markdownlivepreview.com)):

-   Text can be made italics by enclosing it between single stars: `*this text is in italics*`.

-   You can make text bold with two stars: `**this text is bold!**`.

-   Headings are created with `#`:

``` md
# This is a level-1 heading

## This is a level-2 heading
```

::: callout-tip
### Mark-up, Markdown

A **mark-up language** is a text-formatting system consisting of symbols or keywords that control the structure, formatting or relationships of textual elements. The most common mark-up languages are HTML, XML and TeX.

**Markdown** is a simple yet powerful mark-up language.
:::

## Create a `.qmd` file

::: callout-warning
#### Important

When working through these tutorials, always **make sure you are in the course Quarto Project** you created before. You know you are in a Quarto Project because you can see the name of the Project in the top-right corner of RStudio, next to the light-blue cube icon. If you see `Project (none)` in the top-right corner, that means **you are not** in the Quarto Project.

To make sure you are in the Quarto project, you can open the project by going to the project folder in File Explorer (Windows) or Finder (macOS) and double click on the `.Rproj` file.
:::

To create a new `.qmd` file, just click on the `New file` button (the white square with the green plus symbol), then `Quarto Document...`. (If you are asked to install/update packages, do so.)

![](/img/new-quarto.png){fig-align="center" width="400"}

A window will open. Add a title of your choice and your name. Make sure the `Use visual markdown editor` is **NOT ticked**, then click `Create` (you will be free to use the visual editor later, but it is important that you first see what a Quarto document looks like under the hood first).

![](/img/quarto-new.png){fig-align="center" width="500"}

A new `.qmd` file will be created and will open in the File Editor panel in RStudio.

**Note** that creating a Quarto file does not automatically save it on your computer. To do so, either use the keyboard short-cut `CMD+S`/`CTRL+S` or click on the floppy disk icon in the menu below the file tab.

![](/img/quarto-save.png){fig-align="center" width="500"}

Save the file inside the `code/` folder with the following name: `week-03.qmd`.

Remember that all the files of your RStudio project don't live inside RStudio but on your computer.

### Parts of a Quarto file

A Quarto file usually has three main parts:

-   The YAML header (green in the screenshot below).

-   Code chunks (red).

-   Text (blue).

![](/img/quarto-full.png){fig-align="center" width="500"}

Each Quarto file has to start with a YAML header, but you can include as many code chunks and as much text as you wish, in any order. You can also show the document outline, marked as a dashed yellow box in the figure above. To show/hide the outline, just click on the `Outline` button. See the R Note box below for tips.

::: callout-tip
#### Quarto: YAML header

The **header** of a `.qmd` file contains a list of `key: value` pairs, used to specify settings or document info like the `title` and `author`.

YAML headers start and end with three dashes `---`.
:::

::: callout-tip
#### Quarto: Code chunks

**Code chunks** start and end with three back-ticks ```` ``` ```` and they contain code.

`{r}` indicates that the code is R code. Settings can be specified inside the chunk with the `#|` prefix: for example `#| label: setup` sets the name of the chunk (the label) to `setup`.
:::

::: {.callout-important collapse="true"}
#### R Note: Quarto outline and chunk labels

By default, the Quarto outline only shows the Markdown section headers. I find it very useful to also see the code chunks in the outline and if they have a label, that will be shown in italics. It makes navigating long documents very easy and clear, descriptive chunk labels sure help.

To enable code labels in the outline, go to Global Options \> R Markdown \> Basic panel \> `Show in document outline: Sections and all chunks`.

![](img/sections-all-chunks.png){fig-align="center" width="500"}
:::

### Working directory

When using Quarto projects, the working directory (the directory all relative paths are relative to) is the project folder. However, when running code from a Quarto file, the code is run as if the working directory were the folder in which the file is saved. This isn't an issue if the Quarto file is directly in the project folder, but in our case our Quarto files live in the `code/` folder within the project folder (and it is good practice to do so!). We can instruct R to *always* run code from the project folder (i.e. the working directory is the project folder). This is when the `_quarto.yml` file comes into play.

Open the `_quarto.yml` file in RStudio (you can simply click on the file in the `Files` tab and that will open the file in the RStudio editor). Add the line `execute-dir: project` under the title. Note that indentation should be respected, so the line you write should align with `title:`, not with `project:`.

``` yaml
project:
  title: "qml-2024"
  execute-dir: project
```

Now, all code in Quarto files, no matter where they are saved, will be run with the project folder as the working directory.

## How to add and run code

You will use the Quarto document you created to write text and code in this chapter. **Delete everything in the Quarto document below the YAML header.** It's just example textâ€”we're not attached to it! This is what the Quarto document should look like now (if your YAML header also contains "`format:html`, that's completely fine):

![](/img/quarto-empty.png){fig-align="center" width="500"}

Now add an empty line and in the following line write a second-level heading `## Attach packages`, followed by two empty lines. Like so:

![](/img/quarto-heading.png){fig-align="center" width="500"}

Now we can insert a code chunk to add the code to attach the tidyverse. To insert a new code chunk, you can click on the `Insert a new code chunk` button (the little green square icon with a `C` and a plus) , or you can press `OPT+CMD+I/ALT+CTRL+I`.

![](/img/quarto-chunk.png){fig-align="center" width="500"}

A new R code chunk will be inserted at the text cursor position. Now go ahead and add the following lines of code *inside* the R code chunk.

``` r
#| label: setup

library(tidyverse)
```

To run the code, you have two options:

-   You click the small green triangle in the top-right corner of the chunk. This runs all the code in the code chunk.

-   Ensure the text cursor is inside the code chunk and press `SHIFT+CMD+ENTER/SHIFT+CTRL+ENTER`. This too runs all the code in the code chunk.

If you want to run line by line in the code chunk, you can place the text cursor on the line you want to run and press `CMD+ENTER/CTRL+ENTER`. The current line is run and the text cursor is moved to the next line. Just like in the `.R` scripts that we've been using in past weeks. Run the `setup` chunk now.

![](/img/quarto-run-chunk.png){fig-align="center" width="500"}

You will see messages printed below the code chunk, in your Quarto file (don't worry about the `Conflicts`, they just tell you that some functions from the tidyverse packages have replaced the base R functions, which is OK). Now, complete the following tasks before moving on.

-   Create a new second-level heading (with `##`) called `Read data`.

-   Create a new R code chunk.

-   Set the label of the chunk to `read-data`.

-   Add code to read the following files (hint: think about where these files are located relative to the working directory, that is, the project folder). Assign the datasets to the variable names `polite` and `glot_status` respectively.

    -   `winter2012/polite.csv`

    -   `coretta2022/glot_status.rds`

-   Run the code.

## Render Quarto files to HTML

You can render a `.qmd` file into a nicely formatted HTML file.

To render a Quarto file, just click on the `Render` button and an HTML file will be created and saved in the same location of the Quarto file.

![](/img/quarto-render.png){fig-align="center" width="500"}

It may be shown in the Viewer pane (like in the picture below) or in a new browser window. There are a few ways you can set this option to whichever version you prefer. Follow the instructions that work for youâ€”they all do the same thing.

-   `Tools > Global Options > R Markdown > Show output preview inâ€¦`
-   `Preferences > R Markdown > Basics > Show output preview inâ€¦`.
-   Right beside the `Render` button, you will see a little white gear. Click on that gear, and a drop-down menu will open. Click on `Preview in Window` or `Preview in Viewer Pane`, whichever you prefer.

![](/img/quarto-rendered.png){fig-align="center" width="500"}

Rendering Quarto files is not restricted to HTML, but also PDFs and even Word documents! This is very handy when you are writing an analysis report you need to share with others. You could even write your dissertation in Quarto!

::: callout-tip
### Quarto: Rendering

Quarto files can be **rendered** into other formats, like HTML, PDF and Word documents.
:::

Now that you have done all of this hard work, why don't you try and render the Quarto file you've been working on to an HTML file? Click on the `Render` button and if everything works fine you should see a rendered HTML file in a second! Note that if you are enrolled in the QML course, you will be asked to render your Quarto files to PDF for the assessments, so I recommend you try this out now by completing the next section.

## Render Quarto files to PDF

Rendering a Quarto file to PDF is done through LaTeX, a typesetting system with it's own programming language. You don't really need to learn LaTeX to render to PDF, because the conversion is handles by Quarto, but since usually computers don't come with LaTeX you will have to install it (you can learn more about LaTeX in the Spotlight box below). Do this now, by **running the following code in the `Terminal` in RStudio**.

::: callout-important
Note that you are supposed to run the code in the RStudio **Terminal**, not the RStudio R console! The RStudio terminal can be found next to the console in the bottom-left corner of RStudio.
:::

``` bash
quarto install tinytex
```

A LaTeX distribution will be installed. Now, add the following lines to the YAML preamble of your Quarto file and save the file.

``` yaml
format:
  html: default
  pdf: default
```

You will see that not there is a small arrow next to the `Render` button. If you click on it a drop-down menu will appear, with two options: "HTML" and "PDF". This is because we have instructed Quarto that the file should be rendered in two formats in the yaml preamble with the yaml code above. Click on the PDF option now. If all is well, you should soon see your Quarto file rendered to PDF!

![](img/quarto-format.png){fig-align="center" width="500"}

![](img/quarto-pdf.png){fig-align="center" width="500"}

::: {.callout-important collapse="true"}
### Spotlight: LaTeX

LaTeX is a mark-up language for writing beautifully typeset documents, like academic articles and books. It is very popular in disciplines that make heavy use of maths or statistics and it has been adopted by a lot of researchers working in linguistics, although adoption rates vary by sub-field.

LaTeX documents are rendered (compiled) to PDF. In other words, you write a document with extension `.tex` using LaTeX syntax and the document can be compiled to a PDF. Typesetting is dealt with by LaTeX so you just need to specify what you want, like sections, bullet points and so on. This is in the same spirit as Markdown and Quarto. In computing, this approach is called [What You See Is What You Mean](https://en.wikipedia.org/wiki/WYSIWYM) (WYSIWYM). This contrasts with text editors like MS Office Word which are [What You See Is What You Get](https://en.wikipedia.org/wiki/WYSIWYG) (WYSIWYG).

You can learn the basics of LaTeX in 30 minutes by following the tutorial [Learn LaTeX in 30 minutes](https://www.overleaf.com/learn/latex/Learn_LaTeX_in_30_minutes) on Overleaf. Overleaf is an online LaTeX editor service, where you can write and compile LaTeX documents and even collaborate live with other people.

Here is a tiny example of what a LaTeX document looks like.

``` latex
\documentclass{article}

\begin{document}

\section{My first LaTeX document}

This is my first LaTeX document. How exciting!

\end{document}
```

This LaTeX document produces the following PDF. Nothing too exciting, but with LaTeX you can put together professional-looking and highly technical documents.

![A PDF document generated with LaTeX.](img/latex.png){fig-align="center" width="300"}

If you use Quarto to produce a PDF, you don't really have to be very proficient in LaTeX but it helps to know about it, in case something goes wrong with the conversion from Quarto to PDF.
:::

## Summary

::: {.callout-note appearance="minimal"}
-   **Quarto** files can be used to create dynamic and reproducible reports.

-   **Mark-up languages** are text-formatting systems that specify text formatting and structure using symbols or keywords. Markdown is the mark-up language that is used in Quarto documents.

-   The main parts of a `.qmd` file are the YAML header, text and code chunks.

-   You can render Quarto files into HTML, PDF, Word documents and more.
:::
